Before (Create new file):
  execute ':silent !' . 'git mv -f README.md README.html'
  execute ':silent !' . 'cd test'
  execute ':silent !' . 'touch new-file'
  execute ':silent !' . 'echo something >> LICENSE'

After (Delete new-file):
  execute ':silent !' . 'git reset HEAD README.html'
  execute ':silent !' . 'rm README.html'
  execute ':silent !' . 'git reset HEAD README.md'
  execute ':silent !' . 'git checkout README.md'
  execute ':silent !' . 'git checkout LICENSE'
  execute ':silent !' . 'rm new-file'

Execute (ogmf#get_git_modifiled_files):
  let l = ogmf#get_git_modifiled_files()
  let filtered = filter(copy(l), 'v:val !~# "ogmf\\|vader"')
  AssertEqual ['LICENSE', 'README.html', 'new-file'], filtered

Execute (open git modified files):
  OGMF

Then (should have these files in buffers):
  AssertEqual 1, bufexists('LICENSE')
  AssertEqual 1, bufexists('README.html')
  AssertEqual 1, bufexists('new-file')


Execute (open git modified files in tabs using OGMF!):
  OGMF!

Then (should have these files in tabs):
  redir @z
  execute ':silent tabs'
  redir END
  let tabs = split(getreg('z'), "\n")
  let filtered = filter(copy(tabs), 'v:val !~# "Tab page"')
  let clean_tabs = map(copy(filtered), 'substitute(v:val, ">\\?\\s\\+", "", "")')
  AssertNotEqual -1, index(clean_tabs, 'LICENSE')
  AssertNotEqual -1, index(clean_tabs, 'README.html')
  AssertNotEqual -1, index(clean_tabs, 'new-file')
